
# all ag.toml files can optionally contain a version section.  if version of the running astroglue app is out of bounds a warning message will be printed
# to the user and the file will be ignored for future processing.
[version]
min="2.3.0"
max="4.5.8"

[processing.recipe.metadata]
author = "..."
description = "Process OSC dual duo filter data, extracting Ha and Sii from the red channel"

# FIXME-somehow-specify-what-filternames are used to auto detect this recipe can be used?
# figure out how to support dual duo vs single duo.  Perhaps: the FIRST recipie that matches an auto rule
# is used for any auto-defected defaults.  If an auto match is found it will be saved in the generated starter
# project.toml file.

# non OSC people use names like LRGB or SHO

# for dual duo if we see Sii assume they also have HaOiii
auto.for-filter = ["SiiOiii"]

# for single duo look for this
# auto.for-filter = ["HaOiii"]

auto.for-camera = "OSC"



[[processing.stage]]

tool = "siril"
input.source = "session" # or auto? prefer ones in session otherwise find by in masters
input.type = "flat"

when = "session-config" # run once per session-config
output = "{process_dir}/flat_s{sessionid}_c{sessionconfig}.fits"

script = '''
    # Create a sequence from the raw flat frames
    link {output_base} -out={process_dir}
    cd {process_dir}

    # Calibrate the flat frames using master bias
    calibrate {output_base} -bias={strip_extension(bias)}

    # Stack the pre-processed (calibrated) flat frames
    stack pp_{output_base} rej 3 3 -norm=mul -out={flat}
    '''

temporaries = ["{output_base}", "pp_{output_base}"]

[[processing.stage]]

tool = "siril"
when = "session-config" # run once per session-config
output = "FIXME"

script = '''
    # Create a sequence from the raw light frames, seq file goes to process_dir
    link {light_base} -out={process_dir}
    cd {process_dir}

    # Calibrate the light frames using master bias and flat
    calibrate {light_base} -bias={strip_extension(bias)} -flat={strip_extension(flat)} -cfa -equalize_cfa

    # Remove background gradient on a per-frame basis (generates bkg_pp_{light_base}.seq)
    seqsubsky pp_{light_base} 1

    # FIXME only do this step for duo filters (refactor to share common light processing function)
    seqextract_HaOIII bkg_pp_{light_base} -resample=ha
    '''

temporaries = ["FIXME"]

[[processing.stage]]

tool = "python"
when = "post-session" # run once after all session/session-config processing was done

script-file = "process-osc-dual-duo.py"

# the function to run in that file, if not specified astro_fn() is used
script-function = "osc_dual_duo_post_session"

# or inline python code instead of that function?
script = '''
    # red output channel - from the SiiOiii filter Sii is on the 672nm red channel (mistakenly called Ha by siril)
    make_stacked("SiiOiii", "Ha", f"results_00001")

    # green output channel - from the HaOiii filter Ha is on the 656nm red channel
    make_stacked("HaOiii", "Ha", f"results_00002")

    # blue output channel - both filters have Oiii on the 500nm blue channel.  Note the case here is uppercase to match siril output
    make_stacked("*", "OIII", f"results_00003")

    # There might be an old/state autogenerated .seq file, delete it so it doesn't confuse renormalize
    results_seq_path = f"{process_dir}/results_.seq"
    if os.path.exists(results_seq_path):
        os.remove(results_seq_path)

    make_renormalize()
    '''