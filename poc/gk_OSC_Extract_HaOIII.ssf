
########### PREPROCESSING SCRIPT ###########
#
# Script for color camera preprocessing that
# extracts Ha and OIII
#
# Needs 4 sets of RAW images in the working
# directory, within 4 directories:
#   biases/
#   flats/
#   darks/
#   lights/
# Saves masters to ./masters/
#
############################################

requires 1.3.4

# Convert Bias Frames to .fit files
cd biases
link bias -out=../process
cd ../process

# Stack Bias Frames to bias_stacked.fit
stack bias rej 3 3 -nonorm -out=../masters/bias_stacked
cd ..

# Convert Flat Frames to .fit files
cd flats
link flat -out=../process
cd ../process

# Calibrate Flat Frames
calibrate flat -bias=../masters/bias_stacked

# Stack Flat Frames to pp_flat_stacked.fit
stack pp_flat rej 3 3 -norm=mul -out=../masters/pp_flat_stacked
cd ..

# Convert Dark Frames to .fit files
# kevinh: not needed - I just use bias frames instead
#cd darks
#convert dark -out=../process
#cd ../process

# Stack Dark Frames to dark_stacked.fit
#stack dark rej 3 3 -nonorm -out=../masters/dark_stacked
#cd ..

# Convert Light Frames to .fit files
cd lights
link light -out=../process
cd ../process

# read about DBExract script https://www.reddit.com/r/AskAstrophotography/comments/1napads/best_way_to_proces_osc_dual_narrowband_siril/ncw623n/

# Calibrate Light Frames
# calibrate light -dark=../masters/dark_stacked -flat=../masters/pp_flat_stacked -cc=dark -cfa -equalize_cfa
calibrate light -bias=../masters/bias_stacked -flat=../masters/pp_flat_stacked -cfa -equalize_cfa

# Note: all of the preceeding should be performed on a per session basis, then all of the pp_lights from each session
# should be merged into one big pp_light sequence

# FIXME, possibly do https://siril.org/tutorials/tuto-manual/#platesolving-reference-image at this step?

# Extract Ha and OIII
# You may wish to use drizzling to upscale the Ha data instead of upscaling. As drizzling
# is a stacking method, in this case you must use seqextract_HaOiii to extract the Ha and OIII
# from each frame of the sequence, and then stack the OIII images in the usual way and the Ha
# images with a 2x drizzle.
# per https://siril.readthedocs.io/en/stable/processing/extraction.html
# Note: tried "-resample=ha" because instead we would do a 2x drizzle on Ha stacking, but it failed later in the script
# Note: For these sorts of images (and my hires camera) I don't think I need drizzling but trying it as an experiment
seqextract_HaOIII pp_light -resample=ha

# Remove background gradient on a per-frame basis, but I think it is better to this after the frames have been
# split into their two narrowband channels.  I looked at both options and visually no difference though.
seqsubsky Ha_pp_light 1

# Align Ha lights
# Tried "-drizzle -pixfrac=2" (with drizzle because they are currently half sized vs Oiii)
register bkg_Ha_pp_light

# Stack calibrated Ha lights to Ha_stack (temporary)
# stack r_Ha_bkg_pp_light rej 3 3 -norm=addscale -output_norm -32b -out=results_00001
# GESDT generalized extreme studentized deviation test supposedly better
# https://www.cloudynights.com/topic/787764-winsorized-sigma-rejection-sigma-high/

# note: siril only populates quality if using a couple of particular registration methods - and those
# methods are only good for planets.  Instead use # of stars or wFWHM as a filter on what to stack.  From looking at
# my from_astroboy/IC 1848/2025-09-06 set, it seems like good safe threshold to easily strip out frames that are obviously
# crummy is exclude wFWHM > 4 but that only seems right for the Ha channel, Oiii would need > 3 to get rid of the trash.
# Instead try using the k.sigma threshold to totally exclude frames that are awful

stack r_bkg_Ha_pp_light rej g 0.3 0.05 -filter-wfwhm=3k -norm=addscale -output_norm -32b -out=results_00001

# and flip if required
mirrorx_single results_00001

# Remove background gradient on a per-frame basis, but I think it is better to this after the frames have been
# split into their two narrowband channels?
seqsubsky OIII_pp_light 1

# Align OIII lights
register bkg_OIII_pp_light

# Stack calibrated OIII lights to OIII_stack (temporary)
stack r_bkg_OIII_pp_light rej g 0.3 0.05 -filter-wfwhm=3k -norm=addscale -output_norm -32b -out=results_00002

# and flip if required
mirrorx_single results_00002

# Align the result images, small shifts and chromatic aberrations can occur
register results -transf=shift -interp=none

# Renorm OIII to Ha using PixelMath
pm $r_results_00002$*mad($r_results_00001$)/mad($r_results_00002$)-mad($r_results_00001$)/mad($r_results_00002$)*median($r_results_00002$)+median($r_results_00001$)
save ../results/result_OIII_$LIVETIME:%d$s

# Save Ha final result
load r_results_00001
save ../results/result_Ha_$LIVETIME:%d$s

# Remaining interactive workflow per https://www.youtube.com/watch?v=fDhOrKvM7GU
# and https://www.cloudynights.com/topic/943109-osc-processing-hasii-narrowband-filters-with-siril/?p=13777856

# Do background extraction on each of the two output files
# manually place the sample points, not very many pints needed (only about 8) - don't place near edges

# FIXME try graxpert AI background extraction instead (because it can be scripted)

# Go to "Pixel Math" and add the two files with plus icon
# Ha on Red
# Oii on B
# G = 0.6*Ha+0.4*Oii

# then crop

# then Color Calibration (see video) - mark background box and a box more representative

# then remove stars with starnet

# then gen-hyp-stretch, but change to modifiedarcsin+evenweight (see video)

# Note: If modifying this script to also do SiiOii extraction:
# Oii is equally present (ish) on green and blue pixels (same as for HaOiii filters)
# But instead of Ha appearing on the red channel we get Sii there.  So extract and register the same way,
# but stack all of teh Oiii together and stack Sii similar to how Ha was stacked here.
# Then in "pixel math" map:
# Sii -> Red
# Oiii -> Blue
# Ha -> Green



close
